package com.chatapp.test;

import java.io.File;
import java.util.Hashtable;
import java.util.Properties;

import javax.ejb.EJB;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NameClassPair;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;

import com.chatapp.interfaces.Hello;
 
 
public class Client {
	@EJB(lookup = "ejb:ChatAppEAR/ChatAppEJB//HelloBean!com.chatapp.interfaces.Hello")
	private static Hello hello;
	
    public static void main(String[] args) throws NamingException {
    	  System.out.println("?");


    	  
    	  
    	 // Hashtable <String, String> env = new Hashtable <String, String>();
         // env.put("java.naming.factory.initial",
         //  "com.sun.jndi.fscontext.FSContextFactory");
          
//          env.put("java.naming.provider.url",
//            "file:/C:/windows");

          // kreiramo inicijalni kontekst
         //Context ctx = new InitialContext(env);
         // Context ctx = getInitialContext();
          // lookup metoda će vratiti instancu klase File
          // ako se radi o datoteci; ukoliko je u pitanju
          // direktorijum, vratiće novu Context instancu
          // koju koristimo kao i inicijalni kontekst
        //  File file = (File)ctx.lookup("notepad.exe");
    	  
    	  
         
    	  
    	  
    	  
    	  
//    	  final Hashtable jndiProp = new Hashtable<>();
			//env.put(Context.URL_PKG_PREFIXES,
			//		"org.jboss.ejb.client.naming");
//
//			Context ctx = new InitialContext(jndiProp);

			
			// Hello bean  = (Hello) ctx.lookup(LOOKUP_STRING);
    	  
    	  
    	  
    	  
    	  
    	 // System.out.println("prosao");
    	  
    	  
    	  
    	  
    	Hello bean = doLookup();
      
        System.out.println(bean.sayHello()); // 3. Call business logic
    }
 
    private static Hello doLookup() {
        Context context = null;
        Hello bean = null;
        try {
            // 1. Obtaining Context
            context = getInitialContext();
            
            // 2. Lookup and cast
            //System.out.println(context);
           // System.out.println(LOOKUP_STRING);
         
            bean = (Hello) context.lookup(LOOKUP_STRING);
            System.out.println("bean je: " + bean);
        } catch (NamingException e) {
        	System.out.println("exception");
            e.printStackTrace();
        }
        return bean;
    }

    //private static final String LOOKUP_STRING = "ejb:app/ChatAppEAR/ejbModule/Hello!com.chatapp.interfaces.RemoteInt";
    private static final String LOOKUP_STRING = "ejb:ChatAppEAR/ChatAppEJB//HelloBean!"+Hello.class.getName();
    
//    "ejb:ChatAppEAR/ChatAppEJB//StarterBean!"
//	+ StarterRemote.class.getName();
    		//java:global/emyed-ear/emyed-ejb-1.0/WhiteBoardService!com.zreflect.emyed.ejb.interfaces.IWhiteBoardServiceRemote
    /*
     * location of JBoss JNDI Service provider the client will use. It should be
     * URL string.
     */
    private static final String PROVIDER_URL = "jnp://localhost:8080";
 
    /*
     * specifying the list of package prefixes to use when loading in URL
     * context factories. colon separated
     */
    private static final String JNP_INTERFACES = "org.jboss.naming:org.jnp.interfaces";
 
    /*
     * Factory that creates initial context objects. fully qualified class name.
     */
    private static final String INITIAL_CONTEXT_FACTORY = "org.jnp.interfaces.NamingContextFactory";
 
    private static Context initialContext;
 
    public static Context getInitialContext() throws NamingException {
        if (initialContext == null) {
            // Properties extends HashTable
            Properties prop = new Properties();
            prop.put(Context.INITIAL_CONTEXT_FACTORY, INITIAL_CONTEXT_FACTORY);
            prop.put(Context.URL_PKG_PREFIXES, JNP_INTERFACES);
            prop.put(Context.PROVIDER_URL, PROVIDER_URL);
            initialContext = new InitialContext(prop);
        }
        return initialContext;
    }
 
}
